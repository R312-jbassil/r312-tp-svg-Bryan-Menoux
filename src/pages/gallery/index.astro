---
// ========================================
// Configuration et imports

import Layout from "../../layouts/Layout.astro";
import pb from "../../lib/pocketbase";
import { Collections } from "../../utils/pocketbase-types";
import { ui } from "../../i18n/ui.js";

// ========================================
// Récupération des données utilisateur

const locale = (Astro.locals.lang as "en" | "fr") ?? "fr";
const user = Astro.locals.user;

// ========================================
// Chargement des SVG de l'utilisateur

const svgList = user
  ? await pb.collection(Collections.Svg).getFullList({
      sort: "-created",
      filter: `user = "${user.id}"`,
    })
  : [];

// ========================================
// Chargement des SVG publics

const publicSvgList = user
  ? await pb.collection("public_galery").getFullList({
      filter: `user = "${user.id}"`,
    })
  : [];

const publicSvgMap = new Map();
publicSvgList.forEach((pubSvg) => {
  const key = `${pubSvg.nom}_${pubSvg.code_svg}`;
  publicSvgMap.set(key, pubSvg.id);
});
---

<Layout>
  <div class="flex flex-col gap-6 bg-base-200 min-h-screen p-6">
    <!-- Titre de la page -->
    <h1 class="text-3xl font-bold text-violet-400">{ui[locale].gallery.title}</h1>

    <!-- Liste des SVG -->
    {
      svgList.length === 0 ? (
        <div class="alert alert-info shadow-lg">
          <span class="text-zinc-700">{ui[locale].gallery.noSvg}</span>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {svgList.map((svg) => {
            const key = `${svg.nom}_${svg.code_svg}`;
            const isPublic = publicSvgMap.has(key);
            
            // Calcul de l'historique de chat
            const chatHistory = svg.chat_history ? JSON.parse(svg.chat_history) : [];
            const hasHistory = chatHistory.length > 0;
            
            return (
            <div class="card bg-base-100 shadow-xl h-full hover:shadow-2xl hover:-translate-y-2 transition-all duration-300 overflow-hidden border border-base-300/50">
              <!-- SVG preview area with badge overlay -->
              <figure class="bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900 aspect-video overflow-hidden relative group">
                <div class="max-w-full max-h-full p-6 transition-transform group-hover:scale-110 duration-500" set:html={svg.code_svg}></div>
                
                <!-- Overlay au hover avec effet de brillance -->
                <div class="absolute inset-0 bg-gradient-to-t from-primary/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                <!-- Badge statut public -->
                {isPublic && (
                  <div class="absolute top-3 right-3 badge badge-success badge-lg gap-2 shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="currentColor" viewBox="0 0 16 16">
                      <path d="M0 8a8 8 0 1 1 16 0A8 8 0 0 1 0 8zm7.5-6.923c-.67.204-1.335.82-1.887 1.855A7.97 7.97 0 0 0 5.145 4H7.5V1.077zM4.09 4a9.267 9.267 0 0 1 .64-1.539 6.7 6.7 0 0 1 .597-.933A7.025 7.025 0 0 0 2.255 4H4.09zm-.582 3.5c.03-.877.138-1.718.312-2.5H1.674a6.958 6.958 0 0 0-.656 2.5h2.49zM4.847 5a12.5 12.5 0 0 0-.338 2.5H7.5V5H4.847zM8.5 5v2.5h2.99a12.495 12.495 0 0 0-.337-2.5H8.5zM4.51 8.5a12.5 12.5 0 0 0 .337 2.5H7.5V8.5H4.51zm3.99 0V11h2.653c.187-.765.306-1.608.338-2.5H8.5zM5.145 12c.138.386.295.744.468 1.068.552 1.035 1.218 1.65 1.887 1.855V12H5.145zm.182 2.472a6.696 6.696 0 0 1-.597-.933A9.268 9.268 0 0 1 4.09 12H2.255a7.024 7.024 0 0 0 3.072 2.472zM3.82 11a13.652 13.652 0 0 1-.312-2.5h-2.49c.062.89.291 1.733.656 2.5H3.82zm6.853 3.472A7.024 7.024 0 0 0 13.745 12H11.91a9.27 9.27 0 0 1-.64 1.539 6.688 6.688 0 0 1-.597.933zM8.5 12v2.923c.67-.204 1.335-.82 1.887-1.855.173-.324.33-.682.468-1.068H8.5zm3.68-1h2.146c.365-.767.594-1.61.656-2.5h-2.49a13.65 13.65 0 0 1-.312 2.5zm2.802-3.5a6.959 6.959 0 0 0-.656-2.5H12.18c.174.782.282 1.623.312 2.5h2.49zM11.27 2.461c.247.464.462.98.64 1.539h1.835a7.024 7.024 0 0 0-3.072-2.472c.218.284.418.598.597.933zM10.855 4a7.966 7.966 0 0 0-.468-1.068C9.835 1.897 9.17 1.282 8.5 1.077V4h2.355z"/>
                    </svg>
                    {ui[locale].gallery.online}
                  </div>
                )}
                
                <!-- Badge "Nouveau" si créé récemment (moins de 7 jours) -->
                {new Date().getTime() - new Date(svg.created).getTime() < 7 * 24 * 60 * 60 * 1000 && (
                  <div class="absolute top-3 left-3 badge badge-secondary badge-lg gap-2 shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                    </svg>
                    {ui[locale].gallery.newBadge}
                  </div>
                )}
                
                <!-- Badge nombre d'étapes si historique -->
                {hasHistory && !isPublic && (
                  <div class="absolute bottom-3 left-3 badge badge-accent gap-2 shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                    </svg>
                    {chatHistory.length} {chatHistory.length > 1 ? ui[locale].gallery.stepsPlural : ui[locale].gallery.steps}
                  </div>
                )}
              </figure>

              <!-- Card Body avec plus de détails -->
              <div class="card-body p-5 gap-4">
                <!-- En-tête avec titre -->
                <div class="flex items-start justify-between gap-2">
                  <h2 class="text-xl font-bold text-base-content line-clamp-2 flex-1">
                    {svg.nom || ui[locale].gallery.noName}
                  </h2>
                </div>
                
                <!-- Divider décoratif -->
                <div class="h-px bg-gradient-to-r from-transparent via-primary/30 to-transparent"></div>
                
                <!-- Informations de création -->
                <div class="space-y-2">
                  <div class="flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-secondary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                    </svg>
                    <p class="text-xs text-base-content/70">
                      {new Date(svg.created).toLocaleDateString(
                        locale === "fr" ? "fr-FR" : "en-US",
                        { day: 'numeric', month: 'long', year: 'numeric' }
                      )}
                    </p>
                  </div>
                  
                  <div class="flex items-center gap-2">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-accent flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                    </svg>
                    <p class="text-xs text-base-content/70">
                      {new Date(svg.created).toLocaleTimeString(
                        locale === "fr" ? "fr-FR" : "en-US",
                        { hour: '2-digit', minute: '2-digit' }
                      )}
                    </p>
                  </div>
                </div>
                
                <!-- Divider décoratif -->
                <div class="h-px bg-gradient-to-r from-transparent via-base-300 to-transparent"></div>
                
                <!-- Actions -->
                <div class="card-actions flex-col gap-3">
                  <!-- Bouton principal "Voir" -->
                  <a href={`/gallery/${svg.id}`} class="btn btn-primary btn-block gap-2 group">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z" />
                    </svg>
                    {ui[locale].gallery.viewMore}
                  </a>
                  
                  <!-- Boutons secondaires -->
                  <div class="flex gap-2 w-full">
                    {isPublic ? (
                      <!-- Bouton "En ligne" si déjà public -->
                      <button 
                        class="btn btn-success flex-1 gap-2 toggle-public-button" 
                        data-id={svg.id} 
                        data-is-public={isPublic}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <span>{ui[locale].gallery.online}</span>
                      </button>
                    ) : (
                      <!-- Bouton "Publier" si privé -->
                      <button 
                        class="btn btn-info flex-1 gap-2 toggle-public-button hover:btn-success transition-all duration-300" 
                        data-id={svg.id} 
                        data-is-public={isPublic}
                      >
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                        </svg>
                        <span>{ui[locale].gallery.publish}</span>
                      </button>
                    )}
                    <button class="btn btn-error btn-square delete-button tooltip tooltip-top" data-tip={ui[locale].gallery.deleteButton} data-id={svg.id}>
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          )})}
        </div>
      )
    }
  </div>

  <!-- Popup confirmation suppression -->
  <dialog id="confirm-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg">{ui[locale].gallery.confirmDelete}</h3>
      <p class="py-4">{ui[locale].gallery.confirmDeleteMessage}</p>
      <div class="modal-action">
        <button id="cancel-delete" class="btn">{ui[locale].gallery.cancel}</button>
        <button id="confirm-delete" class="btn btn-error">
          {ui[locale].gallery.delete}
        </button>
      </div>
    </div>
  </div>

  <!-- Popup avertissement publication -->
  <dialog id="warning-modal" class="modal">
    <div class="modal-box">
      <h3 class="font-bold text-lg text-warning">{ui[locale].gallery.publishWarningTitle}</h3>
      <p class="py-4">
        {ui[locale].gallery.publishWarningMessage}
      </p>
      <div class="modal-action flex-col gap-2">
        <label class="label cursor-pointer justify-start gap-2">
          <input type="checkbox" id="dont-show-again" class="checkbox checkbox-sm" />
          <span class="label-text">{ui[locale].gallery.dontShowAgain}</span>
        </label>
        <div class="flex gap-2 w-full justify-end">
          <button id="cancel-warning" class="btn btn-ghost">{ui[locale].gallery.cancel}</button>
          <button id="confirm-warning" class="btn btn-primary">{ui[locale].gallery.understood}</button>
        </div>
      </div>
    </div>
  </dialog>
</Layout>

<script>
  //@ts-nocheck
  // ========================================
  // Imports et initialisation

  import { deleteSvg } from "../../lib/pocketbase";

  let currentId = null;
  let pendingToggleButton = null;
  
  const modal = document.getElementById("confirm-modal");
  const confirmBtn = document.getElementById("confirm-delete");
  const cancelBtn = document.getElementById("cancel-delete");
  
  const warningModal = document.getElementById("warning-modal");
  const confirmWarningBtn = document.getElementById("confirm-warning");
  const cancelWarningBtn = document.getElementById("cancel-warning");
  const dontShowAgainCheckbox = document.getElementById("dont-show-again");

  // ========================================
  // Gestion suppression

  document.querySelectorAll(".delete-button").forEach((btn) => {
    btn.addEventListener("click", () => {
      console.log("Delete button clicked, ID:", btn.dataset.id);
      currentId = btn.dataset.id;
      modal.showModal();
    });
  });

  confirmBtn.addEventListener("click", async () => {
    if (!currentId) return;
    try {
      await deleteSvg(currentId);
      location.reload();
    } catch (err) {
      console.error("Error deleting SVG:", err);
    }
  });

  cancelBtn.addEventListener("click", () => {
    currentId = null;
    modal.close();
  });

  // ========================================
  // Gestion popup avertissement

  confirmWarningBtn.addEventListener("click", () => {
    if (dontShowAgainCheckbox.checked) {
      localStorage.setItem("hidePublicWarning", "true");
    }
    warningModal.close();
    if (pendingToggleButton) {
      performToggle(pendingToggleButton);
      pendingToggleButton = null;
    }
  });

  cancelWarningBtn.addEventListener("click", () => {
    warningModal.close();
    pendingToggleButton = null;
  });

  // ========================================
  // Fonction basculement public/privé

  async function performToggle(btn) {
    const svgId = btn.dataset.id;
    try {
      const res = await fetch("/apis/togglePublic", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ svgId }),
      });

      const data = await res.json();
      if (data.success) {
        // Reload to update the status
        location.reload();
      }
    } catch (err) {
      console.error("Error toggling public status:", err);
      alert("Erreur lors du changement de statut public");
    }
  }

  // ========================================
  // Boutons basculement avec avertissement

  document.querySelectorAll(".toggle-public-button").forEach((btn) => {
    btn.addEventListener("click", () => {
      const isCurrentlyPublic = btn.dataset.isPublic === "true";
      
      // Si déjà public, on toggle directement (pour rendre privé)
      if (isCurrentlyPublic) {
        performToggle(btn);
        return;
      }
      
      // Sinon, vérifier si on doit afficher le warning
      const hideWarning = localStorage.getItem("hidePublicWarning");
      if (hideWarning === "true") {
        performToggle(btn);
      } else {
        pendingToggleButton = btn;
        warningModal.showModal();
      }
    });
  });
</script>

