---
// ========================================
// Configuration et imports

import Layout from "../../layouts/Layout.astro";
import pb from "../../lib/pocketbase";
import { type SvgRecord } from "../../utils/pocketbase-types";
import { ui } from "../../i18n/ui.js";

// ========================================
// Récupération des données

const locale = ((Astro.locals as any).lang as "en" | "fr") ?? "fr";
const user = Astro.locals.user;

const id = Astro.params.id;

if (!id) {
  return Astro.redirect("/gallery");
}

// ========================================
// Chargement du SVG

let svg: SvgRecord | null = null;
try {
  svg = await pb.collection("svg").getOne(id);
} catch (error) {
  console.error("Erreur lors de la récupération du SVG:", error);
  return Astro.redirect("/gallery");
}
---

<Layout>
  <div class="flex h-full flex-col overflow-hidden bg-base-200">
    <!-- En-tête -->
    <div class="border-b-2 border-primary/30 bg-base-100 p-4">
      <div class="flex items-center justify-between">
        <a href="/gallery" class="btn btn-ghost"> ← Retour à ma galerie </a>
        <div class="flex-1 text-center">
          <h1 class="text-2xl font-bold text-primary">
            {svg?.nom || "Mon SVG"}
          </h1>
          <p class="text-sm text-base-content/70">
            Créé le {
              svg &&
                new Date(svg.created as string).toLocaleString(
                  locale === "fr" ? "fr-FR" : "en-US"
                )
            }
          </p>
        </div>
        <div class="w-[180px]"></div>
        <!-- Spacer pour équilibrer -->
      </div>
    </div>

    <!-- Contenu principal -->
    <div class="flex flex-1 gap-4 overflow-hidden p-4">
      <!-- Rendu SVG -->
      <div class="flex w-1/2 flex-col gap-2">
        <h2 class="text-lg font-semibold text-primary">Rendu SVG</h2>
        <div
          id="svg-container"
          class="flex flex-1 items-center justify-center overflow-auto rounded-2xl border-2 border-primary/30 bg-base-100 p-6"
        >
          {
            svg ? (
              <div class="max-w-full max-h-full" set:html={svg.code_svg} />
            ) : (
              <span class="text-error">SVG introuvable.</span>
            )
          }
        </div>
      </div>

      <!-- Historique de chat -->
      <div class="flex w-1/2 flex-col gap-2">
        <h2 class="text-lg font-semibold text-secondary">
          Historique de création
        </h2>
        <div
          id="chat-history"
          class="flex-1 overflow-y-auto rounded-2xl border-2 border-secondary/30 bg-base-100 p-4 flex flex-col gap-2"
        >
          {
            svg && svg.chat_history ? (
              (() => {
                try {
                  const history =
                    typeof svg.chat_history === "string"
                      ? JSON.parse(svg.chat_history)
                      : svg.chat_history;

                  return Array.isArray(history) && history.length > 0 ? (
                    history.map(
                      (msg: { role: string; content: string }, idx: number) => (
                        <div
                          class={`chat ${msg.role === "user" ? "chat-end" : "chat-start"}`}
                        >
                          <div class="chat-image avatar">
                            {msg.role === "user" ? (
                              <div class="w-8 rounded-full ring ring-primary ring-offset-base-100 ring-offset-2">
                                <img
                                  src="https://api.dicebear.com/7.x/personas/svg?seed=user"
                                  alt="User"
                                />
                              </div>
                            ) : (
                              <div class="w-8 rounded-full ring ring-secondary ring-offset-base-100 ring-offset-2">
                                <img src="/favicon.svg" alt="Bot" />
                              </div>
                            )}
                          </div>
                          <div
                            class={`chat-bubble ${msg.role === "user" ? "chat-bubble-primary" : "chat-bubble-secondary"}`}
                          >
                            {msg.content}
                          </div>
                        </div>
                      )
                    )
                  ) : (
                    <span class="text-warning">
                      Aucun historique de chat disponible.
                    </span>
                  );
                } catch (error) {
                  return (
                    <span class="text-error">
                      Erreur lors du parsing de l'historique.
                    </span>
                  );
                }
              })()
            ) : (
              <span class="text-error">Aucun historique.</span>
            )
          }
        </div>
      </div>
    </div>

    <!-- Barre de modification -->
    <div class="border-t-2 border-primary/30 bg-base-100 p-4">
      <div class="flex w-full items-center gap-3">
        <input
          id="user-prompt"
          type="text"
          placeholder="Décrivez vos modifications..."
          class="input input-bordered flex-1"
        />
        <button id="edit-button" class="btn btn-primary"> Modifier </button>
      </div>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  // ========================================
  // Initialisation

  let promptList = [];
  let currentSvgId = "";

  const pathParts = window.location.pathname.split("/");
  currentSvgId = pathParts[pathParts.length - 1];

  // ========================================
  // Fonction scroll et initialisation

  function scrollToBottom() {
    const chatHistory = document.getElementById("chat-history");
    if (chatHistory) {
      chatHistory.scrollTop = chatHistory.scrollHeight;
    }
  }

  function initializePromptList() {
    const chatHistory = document.getElementById("chat-history");
    if (chatHistory) {
      const chatMessages = chatHistory.querySelectorAll(".chat");
      promptList = Array.from(chatMessages).map((chat) => {
        const isUser = chat.classList.contains("chat-end");
        const content = chat.querySelector(".chat-bubble")?.textContent || "";
        return {
          role: isUser ? "user" : "assistant",
          content: content.trim(),
        };
      });
    }
    console.log("Historique initialisé:", promptList);

    setTimeout(scrollToBottom, 100);
  }

  // ========================================
  // Fonction génération SVG

  async function generateSVG(prompt) {
    console.log("Génération SVG avec prompt:", prompt);

    const res = await fetch("/apis/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    return (await res.json()).svg;
  }

  // ========================================
  // Fonction sauvegarde modifications

  async function saveSVGEdit(svgCode, chatHistory) {
    console.log("Sauvegarde du SVG édité...");

    const res = await fetch("/apis/editSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        id: currentSvgId,
        code_svg: svgCode,
        chat_history: JSON.stringify(chatHistory),
      }),
    });
    return await res.json();
  }

  function updateChatDisplay() {
    const chatHistory = document.getElementById("chat-history");
    if (!chatHistory) return;

    chatHistory.innerHTML = "";

    promptList.forEach((msg, idx) => {
      const chatDiv = document.createElement("div");
      chatDiv.className = `chat ${msg.role === "user" ? "chat-end" : "chat-start"}`;

      chatDiv.innerHTML = `
        <div class="chat-image avatar">
          <div class="w-8 rounded-full ring ring-${msg.role === "user" ? "primary" : "secondary"} ring-offset-base-100 ring-offset-2">
            <img src="${msg.role === "user" ? "https://api.dicebear.com/7.x/personas/svg?seed=user" : "/favicon.svg"}" alt="${msg.role === "user" ? "User" : "Bot"}" />
          </div>
        </div>
        <div class="chat-bubble ${msg.role === "user" ? "chat-bubble-primary" : "chat-bubble-secondary"}"></div>
      `;

      const bubble = chatDiv.querySelector(".chat-bubble");
      if (bubble) {
        bubble.textContent = msg.content;
      }

      chatHistory.appendChild(chatDiv);
    });

    scrollToBottom();
  }

  async function handleEdit() {
    const promptElement = document.getElementById("user-prompt");
    const prompt = promptElement ? promptElement.value.trim() : "";

    if (!prompt) {
      alert("Veuillez entrer une description de modification.");
      return;
    }

    console.log("Prompt d'édition soumis :", prompt);

    promptList.push({ role: "user", content: prompt });

    const svgContainer = document.getElementById("svg-container");
    const editButton = document.getElementById("edit-button");

    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    editButton.disabled = true;

    try {
      const aiResponse = await generateSVG(promptList);

      const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
      const svgCode = svgMatch ? svgMatch[0] : "";

      console.log("Code SVG généré :", svgCode);

      aiResponse.content = svgCode;
      promptList.push(aiResponse);

      svgContainer.innerHTML = svgCode;

      updateChatDisplay();

      await saveSVGEdit(svgCode, promptList);

      promptElement.value = "";
    } catch (error) {
      console.error("Erreur lors de l'édition :", error);
      alert("Erreur lors de l'édition du SVG.");
    } finally {
      editButton.disabled = false;
    }

    console.log("Historique des prompts :", promptList);
  }

  document.addEventListener("DOMContentLoaded", function () {
    initializePromptList();

    const editButton = document.getElementById("edit-button");
    const input = document.getElementById("user-prompt");

    if (editButton) {
      editButton.addEventListener("click", handleEdit);
    }

    if (input) {
      input.addEventListener("keypress", (e) => {
        if (e.key === "Enter") {
          handleEdit();
        }
      });
    }
  });
</script>
