---
import Layout from "../layouts/Layout.astro";
---

<Layout>
  <div class="flex flex-col gap-6 bg-base-200 min-h-screen p-6">
    <div class="flex flex-col lg:flex-row flex-1 gap-6">
      <div
        id="svg-container"
        class="flex-1 bg-base-100 rounded-2xl border-2 border-violet-500 flex items-center justify-center"
      >
        <span class="text-zinc-400">En attente...</span>
      </div>

      <div
        class="flex-1 bg-base-100 rounded-2xl border-2 border-violet-500 overflow-hidden"
      >
        <div class="mockup-window border bg-base-300 h-full">
          <pre
            id="svg-output"
            class="p-4 text-sm text-zinc-100 bg-zinc-900 h-full w-full overflow-y-auto whitespace-pre-wrap break-words">
          </pre>
        </div>
      </div>
    </div>

    <div
      class="flex gap-2 bg-base-100 rounded-2xl p-2 border-2 border-violet-500 items-center"
    >
      <!-- zone normale -->
      <div id="normal-zone" class="flex w-full items-center gap-2">
        <input
          id="user-prompt"
          type="text"
          placeholder="Décrivez votre SVG..."
          class="input input-bordered flex-1"
        />
        <button id="generate-button" class="btn btn-primary">Générer</button>
        <button id="favorite-button" class="btn btn-secondary">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            fill="white"
            viewBox="0 0 30 30"
          >
            <path
              d="M23,27l-8-7l-8,7V5c0-1.105,0.895-2,2-2h12c1.105,0,2,0.895,2,2V27z"
            ></path>
          </svg>
        </button>
        <button class="btn btn-secondary m-2" id="edit-button">Edit</button>
      </div>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  import { createNewFavorite } from "../lib/pocketbase";

  async function generateSVG(prompt) {
    console.log(prompt);

    const res = await fetch("/api/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    return (await res.json()).svg;
  }
  let promptList = [];

  const editButton = document.getElementById("edit-button");

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner de chargement
    svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG généré : ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
  }

  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }

  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // Réinitialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  const generateButton = document.getElementById("generate-button");
  const input = document.getElementById("user-prompt");
  generateButton.addEventListener("click", handleSubmit);
  input.addEventListener("keypress", (e) => {
    if (e.key === "Enter") handleSubmit();
  });

  const favoriteButton = document.getElementById("favorite-button");
  const actionZone = document.getElementById("normal-zone");
  const svgOutput = document.getElementById("svg-output");

  const successDiv = document.createElement("div");
  successDiv.className =
    "fixed top-4 right-4 bg-green-600 text-white px-4 py-2 rounded-lg shadow-lg opacity-0 transition-opacity duration-500 z-50";
  successDiv.textContent = "Favori enregistré avec succès !";
  document.body.appendChild(successDiv);

  function showSuccess() {
    successDiv.classList.remove("opacity-0");
    successDiv.classList.add("opacity-100");
    setTimeout(() => {
      successDiv.classList.remove("opacity-100");
      successDiv.classList.add("opacity-0");
    }, 5000);
  }

  favoriteButton?.addEventListener("click", () => {
    const svgCode = svgOutput.textContent.trim();
    if (!svgCode) return;

    if (document.getElementById("fav-zone")) return;

    actionZone.classList.add("hidden");

    const favZone = document.createElement("div");
    favZone.id = "fav-zone";
    favZone.className = "flex gap-2 w-full animate-fadeIn";

    const nameInput = document.createElement("input");
    nameInput.type = "text";
    nameInput.placeholder = "Nom du favori...";
    nameInput.className = "input input-bordered flex-1";

    const validateBtn = document.createElement("button");
    validateBtn.textContent = "Valider";
    validateBtn.className = "btn btn-success";

    const cancelBtn = document.createElement("button");
    cancelBtn.textContent = "Annuler";
    cancelBtn.className = "btn btn-error";

    favZone.appendChild(nameInput);
    favZone.appendChild(validateBtn);
    favZone.appendChild(cancelBtn);
    actionZone.parentNode.insertBefore(favZone, actionZone.nextSibling);

    nameInput.focus();

    async function saveFavorite() {
      const name = nameInput.value.trim();
      if (!name) return;

      try {
        await createNewFavorite(name, svgCode);
        favZone.remove();
        actionZone.classList.remove("hidden");
        showSuccess();
      } catch (err) {
        console.error("Erreur enregistrement favori:", err);
      }
    }

    validateBtn.addEventListener("click", saveFavorite);
    nameInput.addEventListener("keypress", (e) => {
      if (e.key === "Enter") saveFavorite();
    });

    cancelBtn.addEventListener("click", () => {
      favZone.remove();
      actionZone.classList.remove("hidden");
    });
  });
</script>
