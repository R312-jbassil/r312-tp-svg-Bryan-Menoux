---
import Layout from "../layouts/Layout.astro";
import { ui } from "../i18n/ui.js";
const locale = (Astro.locals.lang as "en" | "fr") ?? "en";
console.log("Locale in generator:", locale);
---

<Layout>
  <div class="flex flex-col gap-6 bg-base-200 min-h-screen p-6">
    <div class="flex flex-col lg:flex-row flex-1 gap-6">
      <div
        id="svg-container"
        class="flex-1 bg-base-100 rounded-2xl border-2 border-violet-500 flex items-center justify-center"
      >
        <span class="text-zinc-400">{ui[locale].generator.waiting}</span>
      </div>

      <div
        class="flex-1 bg-base-100 rounded-2xl border-2 border-violet-500 overflow-hidden"
      >
        <div class="mockup-window border bg-base-300 h-full">
          <pre
            id="svg-output"
            class="p-4 text-sm text-zinc-100 bg-zinc-900 h-full w-full overflow-y-auto whitespace-pre-wrap break-words">
          </pre>
        </div>
      </div>
    </div>

    <div
      class="flex gap-2 bg-base-100 rounded-2xl p-2 border-2 border-violet-500 items-center"
    >
      <!-- zone normale -->
      <div id="normal-zone" class="flex w-full items-center gap-2">
        <input
          id="user-prompt"
          type="text"
          placeholder={ui[locale].generator.placeholder}
          class="input input-bordered flex-1"
        />
        <button id="generate-button" class="btn btn-primary"
          >{ui[locale].generator.generateButton}</button
        >

        <button id="save-button" class="btn btn-secondary">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="20"
            height="20"
            fill="white"
            viewBox="0 0 30 30"
          >
            <path
              d="M23,27l-8-7l-8,7V5c0-1.105,0.895-2,2-2h12c1.105,0,2,0.895,2,2V27z"
            ></path>
          </svg>
        </button>
        <button class="btn btn-secondary m-2" id="edit-button"
          >{ui[locale].generator.editButton}</button
        >
      </div>
    </div>
  </div>
</Layout>

<script>
  //@ts-nocheck
  import { createNewFavorite } from "../lib/pocketbase";

  // Récupérer la locale depuis le serveur
  const locale = document.documentElement.getAttribute("data-locale") || "fr";

  // Traductions côté client
  const translations = {
    fr: {
      promptName: "Donnez un nom à votre création :",
      nameEmptyError: "Le nom ne peut pas être vide.",
      saveSuccess: "SVG sauvegardé avec succès !",
      saveError: "Erreur lors de la sauvegarde : ",
    },
    en: {
      promptName: "Give a name to your creation:",
      nameEmptyError: "The name cannot be empty.",
      saveSuccess: "SVG saved successfully!",
      saveError: "Error while saving: ",
    },
  };

  const t = translations[locale] || translations.fr;

  async function generateSVG(prompt) {
    console.log(prompt);

    const res = await fetch("/apis/generateSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(prompt),
    });
    return (await res.json()).svg;
  }
  let promptList = [];

  const editButton = document.getElementById("edit-button");

  async function handleEdit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("Prompt soumis : ", prompt);
    // Ajout du prompt de l'utilisateur à la liste
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner de chargement
    svgContainer.innerHTML += `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("Code SVG généré : ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
    console.log("Historique des prompts : ", promptList);
  }

  if (editButton) {
    editButton.addEventListener("click", handleEdit);
  }

  async function handleSubmit() {
    let prompt = "";
    let aiResponse = "";
    const promptElement = document.getElementById("user-prompt");
    prompt = promptElement ? promptElement.value : "";
    console.log("submitted: ", prompt);
    // Réinitialiser la liste des prompts
    promptList.length = 0;
    promptList.push({ role: "user", content: prompt });
    const svgContainer = document.getElementById("svg-container");
    // Afficher un spinner
    svgContainer.innerHTML = `<span class="loading loading-ring loading-xl"></span>`;
    generateButton.disabled = true;
    editButton.disabled = true;
    let svgOutput = document.getElementById("svg-output");
    // Appeler la fonction pour générer le SVG
    aiResponse = await generateSVG(promptList);
    // Extraire le SVG de la réponse
    const svgMatch = aiResponse.content.match(/<svg[\s\S]*?<\/svg>/i);
    aiResponse.content = svgMatch ? svgMatch[0] : "";
    console.log("svgCode: ", aiResponse.content);
    // Ajouter la réponse de l'IA à la liste des prompts
    promptList.push(aiResponse);
    // Afficher le SVG généré
    svgOutput.textContent = aiResponse.content;
    svgContainer.innerHTML = aiResponse.content;
    // Réactiver les boutons
    generateButton.disabled = false;
    editButton.disabled = false;
  }

  const generateButton = document.getElementById("generate-button");
  const input = document.getElementById("user-prompt");
  generateButton.addEventListener("click", handleSubmit);
  input.addEventListener("keypress", (e) => {
    if (e.key === "Enter") handleSubmit();
  });

  const actionZone = document.getElementById("normal-zone");
  const svgOutput = document.getElementById("svg-output");

  const successDiv = document.createElement("div");
  document.body.appendChild(successDiv);
  const user = JSON.parse(localStorage.getItem("user") ?? "null");

  // Fonction utilitaire pour sauvegarder le SVG
  const saveButton = document.getElementById("save-button");

  //création de la div success

  async function saveSVG(params) {
    // Envoi de la requête à notre endpoint
    const res = await fetch("/apis/saveSVG", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify(params),
    });
    return await res.json();
  }
  // Gestionnaire d'événements pour le bouton de sauvegarde
  if (saveButton) {
    saveButton.addEventListener("click", async () => {
      console.log("Tentative de sauvegarde du SVG...");
      if (!user || !user.id) {
        alert("Vous devez être connecté pour sauvegarder un SVG.");
        return;
      }
      // Demande du nom du SVG à l'utilisateur
      const name = prompt(t.promptName);
      if (name === null || name.trim() === "") {
        alert(t.nameEmptyError);
        return;
      }
      const svgOutput = document.getElementById("svg-output")?.textContent;
      console.log("Préparation de la sauvegarde :", JSON.stringify(svgOutput));

      // Préparation des données pour la sauvegarde
      const params = {
        nom: name,
        code_svg: svgOutput || "<svg></svg>", // SVG par défaut si vide
        chat_history: JSON.stringify(promptList), // Historique des échanges
        user: user.id,
      };

      // Sauvegarde et gestion de la réponse
      const result = await saveSVG(params);
      if (result.success) {
        alert(t.saveSuccess);
      } else {
        alert(t.saveError + result.error);
      }
    });
  }
</script>
