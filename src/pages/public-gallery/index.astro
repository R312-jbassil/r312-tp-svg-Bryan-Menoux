---
// ========================================
// Configuration et imports

import Layout from "../../layouts/Layout.astro";
import pb from "../../lib/pocketbase";
import { Collections } from "../../utils/pocketbase-types";
import { ui } from "../../i18n/ui.js";

const locale = ((Astro.locals as any).lang as "en" | "fr") ?? "fr";

// ========================================
// Chargement des SVG publics

const publicSvgList = await pb.collection("public_galery").getFullList({
  sort: "-created",
});

// ========================================
// Récupération des utilisateurs

const userIds = [...new Set(publicSvgList.map(svg => svg.user).filter(Boolean))];
const users = new Map();

for (const userId of userIds) {
  try {
    const user = await pb.collection("users").getOne(userId);
    users.set(userId, user);
  } catch (error) {
    console.error(`Erreur lors de la récupération de l'utilisateur ${userId}:`, error);
  }
}

// ========================================
// Fonction pour construire l'URL de l'avatar

const getAvatarUrl = (user: any) => {
  if (!user || !user.avatar) return null;
  
  const baseUrl = import.meta.env.MODE === "production"
    ? "http://tp-svg.bryan-menoux.fr:8087"
    : "http://127.0.0.1:8090";
  
  const collectionId = "_pb_users_auth_";
  return `${baseUrl}/api/files/${collectionId}/${user.id}/${user.avatar}?thumb=100x100`;
};
---

<Layout>
  <div class="flex flex-col gap-6 bg-base-200 min-h-screen p-6">
    <!-- Titre de la page -->
    <div class="flex items-center justify-between">
      <h1 class="text-3xl font-bold text-violet-400">
        {ui[locale].nav.publicGallery || "Galerie Publique"}
      </h1>
      <span class="badge badge-lg badge-primary">
        {publicSvgList.length} SVG{publicSvgList.length > 1 ? "s" : ""}
      </span>
    </div>

    <!-- Liste des SVG publics -->
    {
      publicSvgList.length === 0 ? (
        <div class="alert alert-info shadow-lg">
          <span class="text-zinc-700">
            Aucun SVG public pour le moment. Soyez le premier à partager !
          </span>
        </div>
      ) : (
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {publicSvgList.map((svg) => {
            const user = users.get(svg.user);
            const avatarUrl = getAvatarUrl(user);
            const userName = user?.name || user?.username || user?.email || "Anonyme";
            const userInitial = userName.charAt(0).toUpperCase();
            
            // Calcul de l'historique de chat
            const chatHistory = svg.chat_history ? JSON.parse(svg.chat_history) : [];
            const hasHistory = chatHistory.length > 0;
            
            return (
            <div class="card bg-base-100 shadow-xl h-full hover:shadow-2xl hover:-translate-y-2 transition-all duration-300 overflow-hidden border border-base-300/50">
              <!-- SVG preview area with badge overlay -->
              <figure class="bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900 aspect-video overflow-hidden relative group">
                <div class="max-w-full max-h-full p-6 transition-transform group-hover:scale-110 duration-500" set:html={svg.code_svg}></div>
                
                <!-- Overlay au hover avec effet de brillance -->
                <div class="absolute inset-0 bg-gradient-to-t from-primary/20 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
                
                <!-- Badge "Nouveau" si créé récemment (moins de 7 jours) -->
                {new Date().getTime() - new Date(svg.created).getTime() < 7 * 24 * 60 * 60 * 1000 && (
                  <div class="absolute top-3 right-3 badge badge-secondary badge-lg gap-2 shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 3v4M3 5h4M6 17v4m-2-2h4m5-16l2.286 6.857L21 12l-5.714 2.143L13 21l-2.286-6.857L5 12l5.714-2.143L13 3z" />
                    </svg>
                    Nouveau
                  </div>
                )}
                
                <!-- Badge nombre d'étapes si historique -->
                {hasHistory && (
                  <div class="absolute top-3 left-3 badge badge-accent gap-2 shadow-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z" />
                    </svg>
                    {chatHistory.length} étape{chatHistory.length > 1 ? 's' : ''}
                  </div>
                )}
              </figure>

              <!-- Card Body avec plus de détails -->
              <div class="card-body p-5 gap-4">
                <!-- En-tête avec titre et badge -->
                <div class="flex items-start justify-between gap-2">
                  <h2 class="text-xl font-bold text-base-content line-clamp-2 flex-1">
                    {svg.nom || "Sans nom"}
                  </h2>
                </div>
                
                <!-- Divider décoratif -->
                <div class="h-px bg-gradient-to-r from-transparent via-primary/30 to-transparent"></div>
                
                <!-- Section utilisateur enrichie -->
                {user ? (
                  <div class="flex items-start gap-3">
                    <!-- Avatar avec indicateur -->
                    <div class="avatar placeholder online">
                      <div class="w-12 h-12 rounded-xl bg-gradient-to-br from-primary to-secondary text-primary-content ring-2 ring-primary/30 shadow-lg">
                        {avatarUrl ? (
                          <img src={avatarUrl} alt={userName} class="object-cover rounded-xl" />
                        ) : (
                          <span class="text-lg font-bold">{userInitial}</span>
                        )}
                      </div>
                    </div>
                    
                    <!-- Informations détaillées -->
                    <div class="flex-1 min-w-0 space-y-1">
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-primary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                        </svg>
                        <p class="text-sm font-semibold text-base-content truncate">
                          {userName}
                        </p>
                      </div>
                      
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-secondary flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z" />
                        </svg>
                        <p class="text-xs text-base-content/70">
                          {new Date(svg.created).toLocaleDateString(
                            locale === "fr" ? "fr-FR" : "en-US",
                            { day: 'numeric', month: 'long', year: 'numeric' }
                          )}
                        </p>
                      </div>
                      
                      <div class="flex items-center gap-2">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 text-accent flex-shrink-0" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z" />
                        </svg>
                        <p class="text-xs text-base-content/70">
                          {new Date(svg.created).toLocaleTimeString(
                            locale === "fr" ? "fr-FR" : "en-US",
                            { hour: '2-digit', minute: '2-digit' }
                          )}
                        </p>
                      </div>
                    </div>
                  </div>
                ) : (
                  <div class="flex items-center gap-2 text-base-content/50 text-sm">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z" />
                    </svg>
                    <span>Créateur anonyme</span>
                  </div>
                )}
                
                <!-- Divider décoratif -->
                <div class="h-px bg-gradient-to-r from-transparent via-base-300 to-transparent"></div>
                
                <!-- Action Button amélioré -->
                <div class="card-actions justify-between items-center">
                  <div class="flex gap-2">
                    <button 
                      class="btn btn-ghost btn-xs btn-circle tooltip tooltip-top like-btn" 
                      data-tip="J'aime"
                      data-svg-id={svg.id}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
                      </svg>
                    </button>
                    <button 
                      class="btn btn-ghost btn-xs btn-circle tooltip tooltip-top share-btn" 
                      data-tip="Partager"
                      data-svg-id={svg.id}
                      data-svg-nom={svg.nom || "svg"}
                    >
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
                      </svg>
                    </button>
                  </div>
                  
                  <a href={`/public-gallery/${svg.id}`} class="btn btn-primary btn-sm gap-2 group/btn">
                    Voir les détails
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 transition-transform group-hover/btn:translate-x-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>
                  </a>
                </div>
              </div>
            </div>
          )})}
        </div>
      )
    }
  </div>
</Layout>

<script>
  // ========================================
  // Gestion des boutons J'aime
  
  document.querySelectorAll('.like-btn').forEach(btn => {
    // Récupérer l'état du localStorage
    const svgId = btn.getAttribute('data-svg-id');
    if (!svgId) return;
    
    const isLiked = localStorage.getItem(`liked_${svgId}`) === 'true';
    const svgElement = btn.querySelector('svg');
    
    // Appliquer l'état initial
    if (isLiked && svgElement) {
      btn.classList.add('text-error');
      svgElement.setAttribute('fill', 'currentColor');
    }
    
    // Gérer le clic
    btn.addEventListener('click', () => {
      const currentlyLiked = localStorage.getItem(`liked_${svgId}`) === 'true';
      const svg = btn.querySelector('svg');
      if (!svg) return;
      
      if (currentlyLiked) {
        // Retirer le like
        localStorage.removeItem(`liked_${svgId}`);
        btn.classList.remove('text-error');
        svg.setAttribute('fill', 'none');
        btn.setAttribute('data-tip', 'J\'aime');
      } else {
        // Ajouter le like
        localStorage.setItem(`liked_${svgId}`, 'true');
        btn.classList.add('text-error');
        svg.setAttribute('fill', 'currentColor');
        btn.setAttribute('data-tip', 'J\'aime déjà donné');
        
        // Animation de pulsation
        btn.classList.add('animate-pulse');
        setTimeout(() => {
          btn.classList.remove('animate-pulse');
        }, 500);
      }
    });
  });

  // ========================================
  // Gestion des boutons Partager
  
  document.querySelectorAll('.share-btn').forEach(btn => {
    btn.addEventListener('click', async () => {
      const svgId = btn.getAttribute('data-svg-id');
      const svgNom = btn.getAttribute('data-svg-nom') || 'svg';
      if (!svgId) return;
      
      const url = `${window.location.origin}/public-gallery/${svgId}`;
      
      const shareData = {
        title: svgNom,
        text: `Découvrez ce SVG : ${svgNom}`,
        url: url
      };

      try {
        if (navigator.share) {
          // Utiliser l'API Web Share si disponible
          await navigator.share(shareData);
        } else {
          // Fallback : copier le lien
          await navigator.clipboard.writeText(url);
          
          // Feedback visuel
          const originalTip = btn.getAttribute('data-tip') || 'Partager';
          btn.setAttribute('data-tip', 'Lien copié !');
          btn.classList.add('text-success');
          
          setTimeout(() => {
            btn.setAttribute('data-tip', originalTip);
            btn.classList.remove('text-success');
          }, 2000);
        }
      } catch (err) {
        console.error('Erreur lors du partage:', err);
      }
    });
  });
</script>
