---
// ========================================
// Configuration et imports

import Layout from "../../layouts/Layout.astro";
import pb from "../../lib/pocketbase";
import { ui } from "../../i18n/ui.js";

// ========================================
// Récupération des données

const locale = ((Astro.locals as any).lang as "en" | "fr") ?? "fr";
const { id } = Astro.params;

if (!id) {
  return Astro.redirect("/public-gallery");
}

// ========================================
// Chargement du SVG public

const svg = await pb.collection("public_galery").getOne(id);

if (!svg) {
  return Astro.redirect("/public-gallery");
}

const chatHistory = svg.chat_history ? JSON.parse(svg.chat_history) : [];

// ========================================
// Récupération de l'utilisateur

let user = null;
try {
  if (svg.user) {
    user = await pb.collection("users").getOne(svg.user);
  }
} catch (error) {
  console.error("Erreur lors de la récupération de l'utilisateur:", error);
}

// ========================================
// Construction des informations utilisateur

const userName = user?.name || user?.username || user?.email || "Anonyme";
const userInitial = userName.charAt(0).toUpperCase();

let avatarUrl: string | null = null;
if (user && user.avatar) {
  const baseUrl =
    import.meta.env.MODE === "production"
      ? "http://tp-svg.bryan-menoux.fr:8087"
      : "http://127.0.0.1:8090";

  const collectionId = "_pb_users_auth_";
  avatarUrl = `${baseUrl}/api/files/${collectionId}/${user.id}/${user.avatar}?thumb=100x100`;
}
---

<Layout>
  <div class="flex h-full flex-col overflow-hidden bg-base-200">
    <!-- En-tête amélioré -->
    <div
      class="bg-gradient-to-r from-primary/10 via-secondary/10 to-primary/10 border-b-2 border-primary/30"
    >
      <div class="mx-auto px-6 py-4">
        <!-- Navigation, titre et actions sur une ligne -->
        <div class="flex items-center justify-between gap-6">
          <!-- Bouton retour -->
          <a
            href="/public-gallery"
            class="btn btn-ghost btn-sm gap-2 flex-shrink-0"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              class="h-5 w-5"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M10 19l-7-7m0 0l7-7m-7 7h18"></path>
            </svg>
            {ui[locale].publicGallery.backToGallery}
          </a>

          <!-- Section centrale avec avatar et infos -->
          <div class="flex items-center gap-4 flex-1">
            <!-- Avatar -->
            <div class="avatar flex-shrink-0">
              <div
                class="w-16 h-16 rounded-2xl ring-4 ring-primary/20 shadow-xl"
              >
                {
                  avatarUrl ? (
                    <img src={avatarUrl} alt={userName} class="object-cover" />
                  ) : (
                    <div class="flex items-center justify-center w-full h-full bg-gradient-to-br from-primary to-secondary text-primary-content font-bold text-2xl">
                      {userInitial}
                    </div>
                  )
                }
              </div>
            </div>

            <!-- Titre et informations -->
            <div class="flex-1 min-w-0">
              <h1 class="text-2xl font-bold text-base-content mb-1 truncate">
                {svg.nom || "SVG Public"}
              </h1>

              <div class="flex flex-wrap items-center gap-3 text-sm">
                <!-- Créateur -->
                <div class="flex items-center gap-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 text-primary"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                    ></path>
                  </svg>
                  <span class="font-semibold text-base-content"
                    >{ui[locale].publicGallery.by} {userName}</span
                  >
                </div>

                <!-- Date de création -->
                <div class="flex items-center gap-2">
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-4 w-4 text-secondary"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"
                    ></path>
                  </svg>
                  <span class="text-base-content/80">
                    {ui[locale].publicGallery.publishedOn}
                    {
                      new Date(svg.created).toLocaleDateString(
                        locale === "fr" ? "fr-FR" : "en-US",
                        { day: "numeric", month: "long", year: "numeric" }
                      )
                    }
                  </span>
                </div>

                <!-- Nombre d'étapes (si historique) -->
                {
                  chatHistory.length > 0 && (
                    <div class="flex items-center gap-2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 text-accent"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"
                        />
                      </svg>
                      <span class="text-base-content/80">
                        {chatHistory.length}{" "}
                        {chatHistory.length > 1
                          ? ui[locale].publicGallery.stepsPlural
                          : ui[locale].publicGallery.steps}
                      </span>
                    </div>
                  )
                }
              </div>
            </div>
          </div>

          <!-- Boutons d'action à droite -->
          <div class="flex gap-2 flex-shrink-0">
            <button id="shareBtn" class="btn btn-ghost btn-sm gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z"
                ></path>
              </svg>
              {ui[locale].publicGallery.share}
            </button>
            <button id="downloadBtn" class="btn btn-ghost btn-sm gap-2">
              <svg
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"
                ></path>
              </svg>
              {ui[locale].publicGallery.download}
            </button>
          </div>
        </div>
      </div>
    </div>

    <!-- Contenu principal -->
    <div class="flex flex-1 gap-4 overflow-hidden p-4">
      <!-- Rendu SVG -->
      <div class="flex w-1/2 flex-col gap-2">
        <h2 class="text-lg font-semibold text-primary">
          {ui[locale].publicGallery.svgRender}
        </h2>
        <div
          class="flex flex-1 items-center justify-center overflow-auto rounded-2xl border-2 border-primary/30 bg-base-100 p-6"
        >
          <div set:html={svg.code_svg} />
        </div>
      </div>

      <!-- Code SVG -->
      <div class="flex w-1/2 flex-col gap-2">
        <h2 class="text-lg font-semibold text-secondary">
          {ui[locale].publicGallery.svgCode}
        </h2>
        <div
          class="mockup-window flex-1 overflow-hidden border border-secondary/20 bg-base-300"
        >
          <pre
            class="h-full w-full overflow-auto whitespace-pre-wrap break-words bg-zinc-900 p-4 text-sm text-zinc-100">{svg.code_svg}</pre>
        </div>
      </div>
    </div>

    <!-- Historique de création -->
    {
      chatHistory.length > 0 && (
        <div class="border-t-2 border-primary/30 bg-base-100 p-4">
          <h3 class="mb-3 text-lg font-semibold text-primary">
            {ui[locale].publicGallery.creationHistory}
          </h3>
          <div class="flex max-h-48 flex-col gap-2 overflow-y-auto">
            {chatHistory.map((msg: any, index: any) => (
              <div
                class={`chat ${msg.role === "user" ? "chat-end" : "chat-start"}`}
              >
                <div
                  class={`chat-bubble ${
                    msg.role === "user"
                      ? "chat-bubble-primary"
                      : "chat-bubble-secondary"
                  }`}
                >
                  {msg.content}
                </div>
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>
</Layout>

<script
  define:vars={{
    svgCode: svg.code_svg,
    svgNom: svg.nom || "svg",
    translations: ui[locale].publicGallery,
  }}
>
  // ========================================
  // Fonction de partage

  document.getElementById("shareBtn")?.addEventListener("click", async () => {
    const shareData = {
      title: svgNom,
      text: `Découvrez ce SVG créé avec notre générateur : ${svgNom}`,
      url: window.location.href,
    };

    try {
      if (navigator.share) {
        // Utiliser l'API Web Share si disponible (mobile)
        await navigator.share(shareData);
      } else {
        // Fallback : copier le lien dans le presse-papier
        await navigator.clipboard.writeText(window.location.href);

        // Afficher une notification
        const btn = document.getElementById("shareBtn");
        const originalText = btn.innerHTML;
        btn.innerHTML = `
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
          </svg>
          ${translations.linkCopied}
        `;
        btn.classList.add("btn-success");

        setTimeout(() => {
          btn.innerHTML = originalText;
          btn.classList.remove("btn-success");
        }, 2000);
      }
    } catch (err) {
      console.error("Erreur lors du partage:", err);
    }
  });

  // ========================================
  // Fonction de téléchargement

  document.getElementById("downloadBtn")?.addEventListener("click", () => {
    // Créer un blob avec le code SVG
    const blob = new Blob([svgCode], { type: "image/svg+xml" });

    // Créer un lien de téléchargement
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `${svgNom}.svg`;

    // Déclencher le téléchargement
    document.body.appendChild(link);
    link.click();

    // Nettoyer
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    // Feedback visuel
    const btn = document.getElementById("downloadBtn");
    const originalText = btn.innerHTML;
    btn.innerHTML = `
      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
      </svg>
      ${translations.downloaded}
    `;
    btn.classList.add("btn-success");

    setTimeout(() => {
      btn.innerHTML = originalText;
      btn.classList.remove("btn-success");
    }, 2000);
  });
</script>
