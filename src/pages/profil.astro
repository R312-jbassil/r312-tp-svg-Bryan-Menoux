---
import Layout from "../layouts/Layout.astro";
import pb from "../lib/pocketbase";
import { ui } from "../i18n/ui.js";

const locale = ((Astro.locals as any).lang as "en" | "fr") ?? "fr";
const user = (Astro.locals as any).user;

if (!user) {
  return Astro.redirect("/login");
}

let userRecord: any = null;
try {
  userRecord = await pb.collection("users").getOne(user.id);
} catch (error) {
  console.error("Erreur lors de la récupération du profil:", error);
}
---

<Layout>
  <div class="flex h-full flex-col overflow-hidden bg-base-200">
    <!-- ============================================ -->
    <!-- HEADER -->
    <!-- ============================================ -->
    <div class="border-b-2 border-primary/30 bg-base-100 p-4">
      <div class="flex items-center justify-between">
        <button id="back-btn" class="btn btn-ghost">
          {ui[locale].profile.backToGallery}
        </button>
        <h1 class="text-2xl font-bold text-primary">
          {ui[locale].profile.title}
        </h1>
        <div class="w-[180px]"></div>
      </div>
    </div>

    <!-- Contenu principal -->
    <div
      class="flex flex-1 items-center justify-center overflow-auto p-4 md:p-8"
    >
      <div class="w-full max-w-4xl space-y-6">
        <!-- Section avatar et informations personnelles -->
        <div
          class="card bg-gradient-to-br from-base-100 to-base-200 shadow-2xl border border-base-300"
        >
          <div class="card-body p-8">
            <div class="flex flex-col lg:flex-row gap-8">
              <!-- Avatar -->
              <div class="flex flex-col items-center gap-6 lg:w-1/3">
                <div class="relative group">
                  <div class="avatar">
                    <div
                      class="w-48 h-48 rounded-full ring-4 ring-primary ring-offset-4 ring-offset-base-100 transition-all duration-300 group-hover:ring-secondary group-hover:scale-105"
                    >
                      {
                        userRecord?.avatar ? (
                          <img
                            id="avatar-preview"
                            src={pb.files.getUrl(userRecord, userRecord.avatar)}
                            alt="Avatar"
                            class="object-cover w-full h-full rounded-full"
                          />
                        ) : (
                          <div class="w-full h-full flex items-center justify-center bg-gradient-to-br from-primary via-secondary to-accent rounded-full">
                            <span class="text-7xl font-bold text-primary-content">
                              {userRecord?.name?.charAt(0).toUpperCase() || "U"}
                            </span>
                          </div>
                        )
                      }
                    </div>
                  </div>
                  <div
                    class="absolute -bottom-2 left-1/2 -translate-x-1/2 opacity-0 group-hover:opacity-100 transition-opacity"
                  >
                    <div class="badge badge-primary badge-sm">
                      {ui[locale].profile.changeAvatar}
                    </div>
                  </div>
                </div>

                <div class="flex flex-col gap-2 w-full max-w-xs">
                  <label
                    for="avatar-input"
                    class="btn btn-primary btn-block gap-2 shadow-lg hover:shadow-xl transition-shadow"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 9a2 2 0 012-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                    {ui[locale].profile.changeAvatar}
                  </label>
                  <input
                    id="avatar-input"
                    type="file"
                    accept="image/*"
                    class="hidden"
                  />
                  {
                    userRecord?.avatar && (
                      <button
                        id="remove-avatar-btn"
                        class="btn btn-outline btn-error btn-block gap-2"
                      >
                        <svg
                          xmlns="http://www.w3.org/2000/svg"
                          class="h-5 w-5"
                          fill="none"
                          viewBox="0 0 24 24"
                          stroke="currentColor"
                        >
                          <path
                            stroke-linecap="round"
                            stroke-linejoin="round"
                            stroke-width="2"
                            d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
                          />
                        </svg>
                        {ui[locale].profile.removeAvatar}
                      </button>
                    )
                  }
                </div>

                <div
                  class="stats stats-vertical shadow w-full max-w-xs bg-base-100"
                >
                  <div class="stat py-3">
                    <div class="stat-title text-xs">
                      {ui[locale].profile.memberSince}
                    </div>
                    <div class="stat-value text-sm text-primary">
                      {
                        userRecord &&
                          new Date(userRecord.created).toLocaleDateString(
                            locale === "fr" ? "fr-FR" : "en-US",
                            { month: "long", year: "numeric" }
                          )
                      }
                    </div>
                  </div>
                </div>
              </div>

              <!-- Formulaire informations personnelles -->
              <form id="profile-form" class="flex-1 space-y-6">
                <div>
                  <h2
                    class="text-2xl font-bold text-base-content mb-1 flex items-center gap-2"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-6 w-6 text-primary"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                      ></path>
                    </svg>
                    {ui[locale].profile.personalInfo}
                  </h2>
                  <p class="text-sm text-base-content/60">
                    {ui[locale].profile.manageProfile}
                  </p>
                </div>

                <div class="divider my-4"></div>

                <div class="form-control">
                  <label class="label">
                    <span
                      class="label-text font-semibold text-base flex items-center gap-2"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 text-primary"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"
                        ></path>
                      </svg>
                      {ui[locale].profile.fullName}
                    </span>
                  </label>
                  <input
                    id="name-input"
                    type="text"
                    value={userRecord?.name || ""}
                    placeholder={ui[locale].profile.fullNamePlaceholder}
                    class="input input-bordered input-lg w-full focus:input-primary transition-all"
                  />
                </div>

                <div class="form-control">
                  <label class="label">
                    <span
                      class="label-text font-semibold text-base flex items-center gap-2"
                    >
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-4 w-4 text-accent"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M3 8l7.89 5.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                        ></path>
                      </svg>
                      {ui[locale].profile.emailAddress}
                    </span>
                  </label>
                  <div class="relative">
                    <input
                      type="email"
                      value={userRecord?.email || ""}
                      disabled
                      class="input input-bordered input-lg w-full bg-base-200 cursor-not-allowed opacity-60"
                    />
                    <div class="absolute right-3 top-1/2 -translate-y-1/2">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-5 w-5 text-base-content/40"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                        ></path>
                      </svg>
                    </div>
                  </div>
                </div>

                <div class="flex gap-3 justify-end pt-6">
                  <button
                    type="button"
                    id="cancel-btn"
                    class="btn btn-ghost btn-lg"
                  >
                    {ui[locale].profile.cancel}
                  </button>
                  <button
                    type="submit"
                    id="save-btn"
                    class="btn btn-primary btn-lg gap-2 shadow-lg hover:shadow-xl transition-shadow"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M5 13l4 4L19 7"></path>
                    </svg>
                    {ui[locale].profile.save}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>

        <!-- Section sécurité -->
        <div
          class="card bg-gradient-to-br from-base-100 to-base-200 shadow-2xl border border-base-300"
        >
          <div class="card-body p-8">
            <div class="flex items-center justify-between mb-4">
              <div>
                <h2
                  class="text-2xl font-bold text-base-content flex items-center gap-2"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    class="h-6 w-6 text-secondary"
                    fill="none"
                    viewBox="0 0 24 24"
                    stroke="currentColor"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z"
                    ></path>
                  </svg>
                  {ui[locale].profile.accountSecurity}
                </h2>
                <p class="text-sm text-base-content/60">
                  {ui[locale].profile.protectAccount}
                </p>
              </div>
            </div>

            <div class="divider my-2"></div>

            <button
              id="toggle-password-form"
              type="button"
              class="btn btn-outline btn-secondary btn-lg w-full justify-between group hover:btn-secondary transition-all"
            >
              <span class="flex items-center gap-3">
                <svg
                  xmlns="http://www.w3.org/2000/svg"
                  class="h-6 w-6"
                  fill="none"
                  viewBox="0 0 24 24"
                  stroke="currentColor"
                >
                  <path
                    stroke-linecap="round"
                    stroke-linejoin="round"
                    stroke-width="2"
                    d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"
                  ></path>
                </svg>
                <span class="font-semibold"
                  >{ui[locale].profile.changePassword}</span
                >
              </span>
              <svg
                id="chevron-icon"
                xmlns="http://www.w3.org/2000/svg"
                class="h-5 w-5 transition-transform duration-300"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M19 9l-7 7-7-7"></path>
              </svg>
            </button>

            <!-- Formulaire changement de mot de passe -->
            <div
              id="password-form-container"
              class="hidden mt-6 p-6 bg-base-200 rounded-2xl border-2 border-secondary/20"
            >
              <form id="password-form" class="space-y-4">
                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold"
                      >{ui[locale].profile.oldPassword}</span
                    >
                  </label>
                  <input
                    id="old-password"
                    type="password"
                    placeholder="••••••••"
                    class="input input-bordered input-lg w-full focus:input-secondary"
                  />
                </div>

                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold"
                      >{ui[locale].profile.newPassword}</span
                    >
                  </label>
                  <input
                    id="new-password"
                    type="password"
                    placeholder="••••••••"
                    class="input input-bordered input-lg w-full focus:input-secondary"
                  />
                  <label class="label">
                    <span class="label-text-alt flex items-center gap-1">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        class="h-3 w-3"
                        fill="none"
                        viewBox="0 0 24 24"
                        stroke="currentColor"
                      >
                        <path
                          stroke-linecap="round"
                          stroke-linejoin="round"
                          stroke-width="2"
                          d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                        ></path>
                      </svg>
                      {ui[locale].profile.minCharacters}
                    </span>
                  </label>
                </div>

                <div class="form-control">
                  <label class="label">
                    <span class="label-text font-semibold"
                      >{ui[locale].profile.confirmPassword}</span
                    >
                  </label>
                  <input
                    id="confirm-password"
                    type="password"
                    placeholder="••••••••"
                    class="input input-bordered input-lg w-full focus:input-secondary"
                  />
                </div>

                <div class="flex gap-3 pt-4">
                  <button
                    type="button"
                    id="cancel-password-btn"
                    class="btn btn-ghost btn-lg flex-1"
                  >
                    {ui[locale].profile.cancel}
                  </button>
                  <button
                    type="submit"
                    class="btn btn-secondary btn-lg flex-1 gap-2 shadow-lg"
                  >
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      class="h-5 w-5"
                      fill="none"
                      viewBox="0 0 24 24"
                      stroke="currentColor"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
                      ></path>
                    </svg>
                    {ui[locale].profile.updatePassword}
                  </button>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Message de confirmation -->
  <div class="toast toast-top toast-end" id="toast" style="display: none;">
    <div class="alert alert-success">
      <span id="toast-message">{ui[locale].profile.profileUpdated}</span>
    </div>
  </div>
</Layout>

<script define:vars={{ translations: ui[locale].profile }}>
  //@ts-nocheck

  let currentUser = null;

  // ========================================
  // Fonction affichage message
  // ========================================
  function showToast(message, isError = false) {
    const toast = document.getElementById("toast");
    const toastMessage = document.getElementById("toast-message");
    const alert = toast?.querySelector(".alert");

    if (toast && toastMessage && alert) {
      toastMessage.textContent = message;

      if (isError) {
        alert.classList.remove("alert-success");
        alert.classList.add("alert-error");
      } else {
        alert.classList.remove("alert-error");
        alert.classList.add("alert-success");
      }

      toast.style.display = "block";

      setTimeout(() => {
        toast.style.display = "none";
      }, 3000);
    }
  }

  // ========================================
  // Chargement données utilisateur
  // ========================================
  async function loadUserData() {
    try {
      const userJson = localStorage.getItem("user");
      if (userJson) {
        currentUser = JSON.parse(userJson);
        console.log("Utilisateur chargé:", currentUser);
      } else {
        console.error("Aucun utilisateur trouvé dans localStorage");
      }
    } catch (error) {
      console.error("Erreur lors du chargement du profil:", error);
    }
  }

  // ========================================
  // Initialisation
  // ========================================
  (async () => {
    await loadUserData();

    // ========================================
    // Menu changement de mot de passe
    // ========================================
    const togglePasswordBtn = document.getElementById("toggle-password-form");
    const passwordFormContainer = document.getElementById(
      "password-form-container"
    );
    const chevronIcon = document.getElementById("chevron-icon");

    if (togglePasswordBtn && passwordFormContainer && chevronIcon) {
      togglePasswordBtn.addEventListener("click", () => {
        const isHidden = passwordFormContainer.classList.contains("hidden");
        passwordFormContainer.classList.toggle("hidden");

        if (isHidden) {
          chevronIcon.style.transform = "rotate(180deg)";
        } else {
          chevronIcon.style.transform = "rotate(0deg)";
        }
      });
    }

    const cancelPasswordBtn = document.getElementById("cancel-password-btn");
    if (cancelPasswordBtn) {
      cancelPasswordBtn.addEventListener("click", () => {
        passwordFormContainer?.classList.add("hidden");
        if (chevronIcon) chevronIcon.style.transform = "rotate(0deg)";

        // Reset password fields
        const oldPassword = document.getElementById("old-password");
        const newPassword = document.getElementById("new-password");
        const confirmPassword = document.getElementById("confirm-password");
        if (oldPassword) oldPassword.value = "";
        if (newPassword) newPassword.value = "";
        if (confirmPassword) confirmPassword.value = "";
      });
    }

    // ========================================
    // Bouton retour
    // ========================================
    const backBtn = document.getElementById("back-btn");
    if (backBtn) {
      backBtn.addEventListener("click", () => {
        if (document.referrer && document.referrer !== window.location.href) {
          window.history.back();
        } else {
          window.location.href = "/gallery";
        }
      });
    }

    // ========================================
    // Gestion avatar
    // ========================================
    const avatarInput = document.getElementById("avatar-input");
    const avatarPreview = document.getElementById("avatar-preview");

    if (avatarInput) {
      avatarInput.addEventListener("change", async (e) => {
        const file = e.target.files?.[0];
        if (file) {
          const reader = new FileReader();
          reader.onload = (e) => {
            if (avatarPreview) {
              avatarPreview.src = e.target.result;
            }
          };
          reader.readAsDataURL(file);

          if (!currentUser) {
            showToast(translations.userNotConnected, true);
            return;
          }

          try {
            const formData = new FormData();
            formData.append("userId", currentUser.id);
            formData.append("avatar", file);

            const response = await fetch("/apis/updateProfile", {
              method: "POST",
              body: formData,
            });

            if (!response.ok) {
              throw new Error(translations.errorUpdatingAvatar);
            }

            const data = await response.json();

            showToast(translations.avatarUpdated);

            // Mettre à jour localStorage
            if (data.user) {
              currentUser = data.user;
              localStorage.setItem("user", JSON.stringify(currentUser));

              setTimeout(() => {
                window.location.reload();
              }, 1000);
            }
          } catch (error) {
            console.error("Erreur lors de la mise à jour de l'avatar:", error);
            showToast(translations.errorUpdatingAvatar, true);
          }
        }
      });
    }

    // Suppression avatar
    const removeAvatarBtn = document.getElementById("remove-avatar-btn");
    if (removeAvatarBtn) {
      removeAvatarBtn.addEventListener("click", async () => {
        if (!currentUser) {
          showToast(translations.userNotConnected, true);
          return;
        }

        try {
          const response = await fetch("/apis/updateProfile", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: currentUser.id,
              avatar: null,
            }),
          });

          if (!response.ok) {
            throw new Error(translations.errorRemovingAvatar);
          }

          if (avatarPreview) {
            avatarPreview.src =
              "https://api.dicebear.com/7.x/personas/svg?seed=user";
          }

          removeAvatarBtn.style.display = "none";
          showToast(translations.avatarRemoved);

          currentUser.avatar = null;
          localStorage.setItem("user", JSON.stringify(currentUser));

          setTimeout(() => {
            window.location.reload();
          }, 1000);
        } catch (error) {
          console.error("Erreur lors de la suppression de l'avatar:", error);
          showToast(translations.errorRemovingAvatar, true);
        }
      });
    }

    // ========================================
    // Formulaire informations personnelles
    // ========================================
    const profileForm = document.getElementById("profile-form");
    if (profileForm) {
      profileForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!currentUser) {
          showToast(translations.userNotConnected, true);
          return;
        }

        const nameInput = document.getElementById("name-input");
        const saveBtn = document.getElementById("save-btn");

        if (saveBtn) saveBtn.disabled = true;

        try {
          const formData = new FormData();
          formData.append("userId", currentUser.id);

          if (nameInput?.value) {
            formData.append("name", nameInput.value);
            formData.append("username", nameInput.value);
          }

          const response = await fetch("/apis/updateProfile", {
            method: "POST",
            body: formData,
          });

          if (!response.ok) {
            throw new Error(translations.errorUpdatingProfile);
          }

          const data = await response.json();

          showToast(translations.profileUpdated);

          if (data.user) {
            currentUser = data.user;
            localStorage.setItem("user", JSON.stringify(currentUser));

            setTimeout(() => {
              window.location.reload();
            }, 1000);
          }
        } catch (error) {
          console.error("Erreur lors de la mise à jour du profil:", error);
          showToast(translations.errorUpdatingProfile, true);
        } finally {
          if (saveBtn) saveBtn.disabled = false;
        }
      });
    }

    // Bouton annuler
    const cancelBtn = document.getElementById("cancel-btn");
    if (cancelBtn) {
      cancelBtn.addEventListener("click", () => {
        window.location.href = "/gallery";
      });
    }

    // ========================================
    // Formulaire changement de mot de passe
    // ========================================
    const passwordForm = document.getElementById("password-form");
    if (passwordForm) {
      passwordForm.addEventListener("submit", async (e) => {
        e.preventDefault();

        if (!currentUser) {
          showToast(translations.userNotConnected, true);
          return;
        }

        const oldPassword = document.getElementById("old-password");
        const newPassword = document.getElementById("new-password");
        const confirmPassword = document.getElementById("confirm-password");

        if (newPassword?.value !== confirmPassword?.value) {
          showToast(translations.passwordMismatch, true);
          return;
        }

        if (!newPassword?.value || newPassword.value.length < 8) {
          showToast(translations.passwordTooShort, true);
          return;
        }

        try {
          const response = await fetch("/apis/updateProfile", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
              userId: currentUser.id,
              oldPassword: oldPassword?.value,
              password: newPassword?.value,
              passwordConfirm: confirmPassword?.value,
            }),
          });

          if (!response.ok) {
            throw new Error(translations.error);
          }

          showToast(translations.passwordUpdated);

          if (oldPassword) oldPassword.value = "";
          if (newPassword) newPassword.value = "";
          if (confirmPassword) confirmPassword.value = "";
        } catch (error) {
          console.error(
            "Erreur lors de la mise à jour du mot de passe:",
            error
          );
          showToast(translations.error, true);
        }
      });
    }
  })(); // Fin de l'IIFE async
</script>
